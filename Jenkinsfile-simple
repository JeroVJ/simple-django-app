// Jenkinsfile Alternativo - Versión Simplificada
// Usar este si el Jenkinsfile principal tiene problemas

pipeline {
    agent any
    
    environment {
        PROJECT_DIR = 'cool_counters'
    }
    
    stages {
        stage('1. Checkout Código') {
            steps {
                echo '═══════════════════════════════════════'
                echo 'Descargando código desde repositorio'
                echo '═══════════════════════════════════════'
                checkout scm
                sh 'ls -la'
            }
        }
        
        stage('2. Instalar Dependencias') {
            steps {
                echo '═══════════════════════════════════════'
                echo 'Instalando Python y dependencias'
                echo '═══════════════════════════════════════'
                sh '''
                    python3 --version
                    pip3 --version
                    pip3 install --user Django
                    pip3 install --user pylint
                    pip3 install --user pylint-django
                '''
            }
        }
        
        stage('3. Análisis con Pylint') {
            steps {
                echo '═══════════════════════════════════════'
                echo 'Ejecutando análisis estático con Pylint'
                echo '═══════════════════════════════════════'
                script {
                    // Ejecutar pylint y guardar resultado
                    sh '''
                        cd ${PROJECT_DIR}
                        
                        # Crear archivo de configuración pylint si no existe
                        if [ ! -f ../.pylintrc ]; then
                            echo "[MASTER]" > ../.pylintrc
                            echo "load-plugins=pylint_django" >> ../.pylintrc
                            echo "ignore=migrations" >> ../.pylintrc
                        fi
                        
                        # Ejecutar pylint (--exit-zero para no fallar el build)
                        python3 -m pylint --exit-zero --rcfile=../.pylintrc . > ../pylint-report.txt || true
                        
                        cd ..
                        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                        echo "Reporte de Pylint:"
                        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                        head -50 pylint-report.txt
                        echo ""
                        echo "... (ver pylint-report.txt completo en artifacts)"
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'pylint-report.txt', 
                                   allowEmptyArchive: true,
                                   fingerprint: true
                }
            }
        }
        
        stage('4. Preparar Base de Datos') {
            steps {
                echo '═══════════════════════════════════════'
                echo 'Ejecutando migraciones de Django'
                echo '═══════════════════════════════════════'
                sh '''
                    cd ${PROJECT_DIR}
                    python3 manage.py migrate --noinput
                    python3 manage.py check
                '''
            }
        }
        
        stage('5. Ejecutar Tests') {
            steps {
                echo '═══════════════════════════════════════'
                echo 'Ejecutando suite de tests'
                echo '═══════════════════════════════════════'
                sh '''
                    cd ${PROJECT_DIR}
                    python3 manage.py test --noinput
                '''
            }
        }
        
        stage('6. Desplegar Aplicación') {
            steps {
                echo '═══════════════════════════════════════'
                echo 'Desplegando aplicación Django'
                echo '═══════════════════════════════════════'
                sh '''
                    cd ${PROJECT_DIR}
                    
                    # Detener proceso anterior si existe
                    pkill -f "manage.py runserver" || true
                    sleep 2
                    
                    # Iniciar servidor Django en background
                    nohup python3 manage.py runserver 0.0.0.0:8000 > ../django-app.log 2>&1 &
                    
                    # Guardar PID
                    echo $! > ../django-app.pid
                    
                    # Esperar que el servidor inicie
                    echo "Esperando que el servidor inicie..."
                    sleep 10
                    
                    # Verificar que está corriendo
                    if pgrep -f "manage.py runserver" > /dev/null; then
                        echo "✓ Servidor Django iniciado correctamente"
                        echo "✓ PID: $(cat ../django-app.pid)"
                        
                        # Intentar hacer request
                        if curl -f -s http://localhost:8000/ > /dev/null; then
                            echo "✓ Aplicación respondiendo correctamente en http://localhost:8000"
                        else
                            echo "⚠ Servidor corriendo pero no responde aún (puede tardar unos segundos)"
                        fi
                    else
                        echo "✗ Error: No se pudo iniciar el servidor"
                        cat ../django-app.log
                        exit 1
                    fi
                '''
            }
        }
    }
    
    post {
        success {
            echo '╔═══════════════════════════════════════════════╗'
            echo '║     ✓ PIPELINE COMPLETADO EXITOSAMENTE       ║'
            echo '╚═══════════════════════════════════════════════╝'
            echo ''
            echo 'Resumen:'
            echo '  ✓ Código descargado'
            echo '  ✓ Análisis con Pylint completado'
            echo '  ✓ Migraciones ejecutadas'
            echo '  ✓ Tests pasados'
            echo '  ✓ Aplicación desplegada'
            echo ''
            echo 'Aplicación disponible en: http://localhost:8000'
            echo 'Reporte de Pylint: ver artifacts'
        }
        
        failure {
            echo '╔═══════════════════════════════════════════════╗'
            echo '║          ✗ PIPELINE FALLÓ                     ║'
            echo '╚═══════════════════════════════════════════════╝'
            echo ''
            echo 'Revisa los logs de cada stage para identificar el error.'
            echo ''
            sh 'tail -50 django-app.log || true'
        }
        
        always {
            echo ''
            echo 'Limpieza completada'
        }
    }
}
